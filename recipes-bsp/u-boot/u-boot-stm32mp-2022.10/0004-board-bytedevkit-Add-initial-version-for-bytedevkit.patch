From 8195fc2e7fc46badceb409418cf53c268c9724ff Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Oliver=20St=C3=A4bler?= <oliver.staebler@bytesatwork.ch>
Date: Tue, 23 Jul 2019 15:46:12 +0200
Subject: [PATCH] board: bytedevkit: Add initial version for bytedevkit
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Based on board/st/stmp32mp1.

Signed-off-by: Oliver St√§bler <oliver.staebler@bytesatwork.ch>
Signed-off-by: Daniel Ammann <daniel.ammann@bytesatwork.ch>
Signed-off-by: Guy Morand <guy.morand@bytesatwork.ch>
Signed-off-by: Rico Ganahl <rico.ganahl@bytesatwork.ch>
---
 arch/arm/Kconfig                              |   1 +
 arch/arm/dts/Makefile                         |   2 +
 .../dts/stm32mp15-ddr3-1x8Gb-1066-binG.dtsi   | 120 +++++
 .../stm32mp157c-bytedevkit-v1-1-u-boot.dtsi   |   1 +
 arch/arm/dts/stm32mp157c-bytedevkit-v1-1.dts  |  12 +
 .../stm32mp157c-bytedevkit-v1-3-u-boot.dtsi   |  31 ++
 arch/arm/dts/stm32mp157c-bytedevkit-v1-3.dts  |  18 +
 arch/arm/dts/stm32mp157c-bytedevkit.dtsi      | 108 ++++
 arch/arm/dts/stm32mp157c-byteengine-m5.dtsi   | 440 ++++++++++++++++
 arch/arm/mach-stm32mp/Kconfig.15x             |  21 +
 board/bytesatwork/bytedevkit/Kconfig          |  43 ++
 board/bytesatwork/bytedevkit/Makefile         |  10 +
 board/bytesatwork/bytedevkit/hwid.c           | 481 ++++++++++++++++++
 board/bytesatwork/bytedevkit/stm32mp1.c       | 176 +++++++
 board/bytesatwork/common                      |   1 +
 configs/stm32mp157_bytedevkit_1g_defconfig    | 109 ++++
 configs/stm32mp157_bytedevkit_defconfig       | 108 ++++
 include/configs/bytedevkit.h                  | 122 +++++
 18 files changed, 1804 insertions(+)
 create mode 100644 arch/arm/dts/stm32mp15-ddr3-1x8Gb-1066-binG.dtsi
 create mode 120000 arch/arm/dts/stm32mp157c-bytedevkit-v1-1-u-boot.dtsi
 create mode 100644 arch/arm/dts/stm32mp157c-bytedevkit-v1-1.dts
 create mode 100644 arch/arm/dts/stm32mp157c-bytedevkit-v1-3-u-boot.dtsi
 create mode 100644 arch/arm/dts/stm32mp157c-bytedevkit-v1-3.dts
 create mode 100644 arch/arm/dts/stm32mp157c-bytedevkit.dtsi
 create mode 100644 arch/arm/dts/stm32mp157c-byteengine-m5.dtsi
 create mode 100644 board/bytesatwork/bytedevkit/Kconfig
 create mode 100644 board/bytesatwork/bytedevkit/Makefile
 create mode 100644 board/bytesatwork/bytedevkit/hwid.c
 create mode 100644 board/bytesatwork/bytedevkit/stm32mp1.c
 create mode 120000 board/bytesatwork/common
 create mode 100644 configs/stm32mp157_bytedevkit_1g_defconfig
 create mode 100644 configs/stm32mp157_bytedevkit_defconfig
 create mode 100644 include/configs/bytedevkit.h

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 82cd456f51..619e02b059 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -2310,6 +2310,7 @@ source "board/broadcom/bcm96753ref/Kconfig"
 source "board/broadcom/bcm968360bg/Kconfig"
 source "board/broadcom/bcm968580xref/Kconfig"
 source "board/broadcom/bcmns3/Kconfig"
+source "board/bytesatwork/bytedevkit/Kconfig"
 source "board/cavium/thunderx/Kconfig"
 source "board/eets/pdu001/Kconfig"
 source "board/emulation/qemu-arm/Kconfig"
diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index c6f52e8ea8..c5e3c70e0b 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -1191,6 +1191,8 @@ dtb-$(CONFIG_STM32MP15X) += \
 	stm32mp157a-icore-stm32mp1-edimm2.2.dtb \
 	stm32mp157a-microgea-stm32mp1-microdev2.0.dtb \
 	stm32mp157a-microgea-stm32mp1-microdev2.0-of7.dtb \
+	stm32mp157c-bytedevkit-v1-1.dtb \
+	stm32mp157c-bytedevkit-v1-3.dtb \
 	stm32mp157c-dk2.dtb \
 	stm32mp157c-ed1.dtb \
 	stm32mp157c-ev1.dtb \
diff --git a/arch/arm/dts/stm32mp15-ddr3-1x8Gb-1066-binG.dtsi b/arch/arm/dts/stm32mp15-ddr3-1x8Gb-1066-binG.dtsi
new file mode 100644
index 0000000000..b38781a63d
--- /dev/null
+++ b/arch/arm/dts/stm32mp15-ddr3-1x8Gb-1066-binG.dtsi
@@ -0,0 +1,120 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright (C) 2021 bytes at work AG - http://www.bytesatwork.ch
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ */
+
+/*
+ * File generated by STMicroelectronics STM32CubeMX DDR Tool for MPUs
+ * DDR type: DDR3 / DDR3L
+ * DDR width: 16bits
+ * DDR density: 8Gb
+ * System frequency: 533000Khz
+ * Relaxed Timing Mode: false
+ * Address mapping type: RBC
+ *
+ * Save Date: 2020.02.20, save Time: 18:45:20
+ */
+
+#define DDR_MEM_NAME	"DDR3-DDR3L 16bits MT41"
+#define DDR_MEM_SPEED	533000
+#define DDR_MEM_SIZE	0x40000000
+
+#define DDR_MSTR 0x00041401
+#define DDR_MRCTRL0 0x00000010
+#define DDR_MRCTRL1 0x00000000
+#define DDR_DERATEEN 0x00000000
+#define DDR_DERATEINT 0x00800000
+#define DDR_PWRCTL 0x00000000
+#define DDR_PWRTMG 0x00400010
+#define DDR_HWLPCTL 0x00000000
+#define DDR_RFSHCTL0 0x00210000
+#define DDR_RFSHCTL3 0x00000000
+#define DDR_RFSHTMG 0x0081008B
+#define DDR_CRCPARCTL0 0x00000000
+#define DDR_DRAMTMG0 0x111B2414
+#define DDR_DRAMTMG1 0x000A041A
+#define DDR_DRAMTMG2 0x0506080E
+#define DDR_DRAMTMG3 0x0050400C
+#define DDR_DRAMTMG4 0x06040606
+#define DDR_DRAMTMG5 0x06060403
+#define DDR_DRAMTMG6 0x02020002
+#define DDR_DRAMTMG7 0x00000202
+#define DDR_DRAMTMG8 0x00001005
+#define DDR_DRAMTMG14 0x000000A0
+#define DDR_ZQCTL0 0xC2000040
+#define DDR_DFITMG0 0x02040104
+#define DDR_DFITMG1 0x00000202
+#define DDR_DFILPCFG0 0x07000000
+#define DDR_DFIUPD0 0xC0400003
+#define DDR_DFIUPD1 0x00000000
+#define DDR_DFIUPD2 0x00000000
+#define DDR_DFIPHYMSTR 0x00000000
+#define DDR_ODTCFG 0x06000600
+#define DDR_ODTMAP 0x00000001
+#define DDR_SCHED 0x00000C01
+#define DDR_SCHED1 0x00000000
+#define DDR_PERFHPR1 0x01000001
+#define DDR_PERFLPR1 0x08000200
+#define DDR_PERFWR1 0x08000400
+#define DDR_DBG0 0x00000000
+#define DDR_DBG1 0x00000000
+#define DDR_DBGCMD 0x00000000
+#define DDR_POISONCFG 0x00000000
+#define DDR_PCCFG 0x00000010
+#define DDR_PCFGR_0 0x00010000
+#define DDR_PCFGW_0 0x00000000
+#define DDR_PCFGQOS0_0 0x02100C03
+#define DDR_PCFGQOS1_0 0x00800100
+#define DDR_PCFGWQOS0_0 0x01100C03
+#define DDR_PCFGWQOS1_0 0x01000200
+#define DDR_PCFGR_1 0x00010000
+#define DDR_PCFGW_1 0x00000000
+#define DDR_PCFGQOS0_1 0x02100C03
+#define DDR_PCFGQOS1_1 0x00800040
+#define DDR_PCFGWQOS0_1 0x01100C03
+#define DDR_PCFGWQOS1_1 0x01000200
+#define DDR_ADDRMAP1 0x00070707
+#define DDR_ADDRMAP2 0x00000000
+#define DDR_ADDRMAP3 0x1F000000
+#define DDR_ADDRMAP4 0x00001F1F
+#define DDR_ADDRMAP5 0x06060606
+#define DDR_ADDRMAP6 0x06060606
+#define DDR_ADDRMAP9 0x00000000
+#define DDR_ADDRMAP10 0x00000000
+#define DDR_ADDRMAP11 0x00000000
+#define DDR_PGCR 0x01442E02
+#define DDR_PTR0 0x0022AA5B
+#define DDR_PTR1 0x04841104
+#define DDR_PTR2 0x042DA068
+#define DDR_ACIOCR 0x10400812
+#define DDR_DXCCR 0x00000C40
+#define DDR_DSGCR 0xF200011F
+#define DDR_DCR 0x0000000B
+#define DDR_DTPR0 0x34D466D0
+#define DDR_DTPR1 0x098B00D8
+#define DDR_DTPR2 0x10023600
+#define DDR_MR0 0x00000820
+#define DDR_MR1 0x00000000
+#define DDR_MR2 0x00000200
+#define DDR_MR3 0x00000000
+#define DDR_ODTCR 0x00010000
+#define DDR_ZQ0CR1 0x00000038
+#define DDR_DX0GCR 0x0000CE81
+#define DDR_DX0DLLCR 0x40000000
+#define DDR_DX0DQTR 0x33333333
+#define DDR_DX0DQSTR 0x3DB02000
+#define DDR_DX1GCR 0x0000CE81
+#define DDR_DX1DLLCR 0x40000000
+#define DDR_DX1DQTR 0x33333333
+#define DDR_DX1DQSTR 0x3DB02000
+#define DDR_DX2GCR 0x0000CE80
+#define DDR_DX2DLLCR 0x40000000
+#define DDR_DX2DQTR 0xFFFFFFFF
+#define DDR_DX2DQSTR 0x3DB02000
+#define DDR_DX3GCR 0x0000CE80
+#define DDR_DX3DLLCR 0x40000000
+#define DDR_DX3DQTR 0xFFFFFFFF
+#define DDR_DX3DQSTR 0x3DB02000
+
+#include "stm32mp15-ddr.dtsi"
diff --git a/arch/arm/dts/stm32mp157c-bytedevkit-v1-1-u-boot.dtsi b/arch/arm/dts/stm32mp157c-bytedevkit-v1-1-u-boot.dtsi
new file mode 120000
index 0000000000..710f42c394
--- /dev/null
+++ b/arch/arm/dts/stm32mp157c-bytedevkit-v1-1-u-boot.dtsi
@@ -0,0 +1 @@
+stm32mp157c-bytedevkit-v1-3-u-boot.dtsi
\ No newline at end of file
diff --git a/arch/arm/dts/stm32mp157c-bytedevkit-v1-1.dts b/arch/arm/dts/stm32mp157c-bytedevkit-v1-1.dts
new file mode 100644
index 0000000000..e660f9ac79
--- /dev/null
+++ b/arch/arm/dts/stm32mp157c-bytedevkit-v1-1.dts
@@ -0,0 +1,12 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Copyright (C) 2022 bytes at work AG - http://www.bytesatwork.ch
+ */
+
+/dts-v1/;
+
+#include "stm32mp157c-bytedevkit.dtsi"
+
+/ {
+	model = "byteDEVKIT 1.1";
+};
diff --git a/arch/arm/dts/stm32mp157c-bytedevkit-v1-3-u-boot.dtsi b/arch/arm/dts/stm32mp157c-bytedevkit-v1-3-u-boot.dtsi
new file mode 100644
index 0000000000..f62789b098
--- /dev/null
+++ b/arch/arm/dts/stm32mp157c-bytedevkit-v1-3-u-boot.dtsi
@@ -0,0 +1,31 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright : STMicroelectronics 2018
+ */
+
+#include "stm32mp15-scmi-u-boot.dtsi"
+
+#include <dt-bindings/clock/stm32mp1-clksrc.h>
+
+/ {
+	aliases {
+		i2c1 = &i2c2;
+		i2c3 = &i2c4;
+		mmc0 = &sdmmc1;
+		spi0 = &qspi;
+	};
+};
+
+&uart4_pins {
+	u-boot,dm-pre-reloc;
+	pins1 {
+		u-boot,dm-pre-reloc;
+	};
+	pins2 {
+		u-boot,dm-pre-reloc;
+	};
+};
+
+&uart4 {
+	u-boot,dm-pre-reloc;
+};
diff --git a/arch/arm/dts/stm32mp157c-bytedevkit-v1-3.dts b/arch/arm/dts/stm32mp157c-bytedevkit-v1-3.dts
new file mode 100644
index 0000000000..3a3d6d2308
--- /dev/null
+++ b/arch/arm/dts/stm32mp157c-bytedevkit-v1-3.dts
@@ -0,0 +1,18 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Copyright (C) 2022 bytes at work AG - http://www.bytesatwork.ch
+ */
+
+/dts-v1/;
+
+#include "stm32mp157c-bytedevkit.dtsi"
+
+/ {
+	model = "byteDEVKIT 1.3";
+};
+
+&i2c2 {
+	eeprom@57 {
+		reg = <0x57>;
+	};
+};
diff --git a/arch/arm/dts/stm32mp157c-bytedevkit.dtsi b/arch/arm/dts/stm32mp157c-bytedevkit.dtsi
new file mode 100644
index 0000000000..7417c3a689
--- /dev/null
+++ b/arch/arm/dts/stm32mp157c-bytedevkit.dtsi
@@ -0,0 +1,108 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Copyright (C) 2019 bytes at work AG - http://www.bytesatwork.ch
+ */
+
+#include "stm32mp157c-byteengine-m5.dtsi"
+
+/ {
+	compatible = "batw,bytedevkit", "batw,m5", "st,stm32mp157";
+
+	aliases {
+		serial0 = &uart4;
+		spi0 = &qspi;
+	};
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+
+	usb_phy_tuning: usb-phy-tuning {
+		st,hs-dc-level = <2>;
+		st,fs-rftime-tuning;
+		st,hs-rftime-reduction;
+		st,hs-current-trim = <15>;
+		st,hs-impedance-trim = <1>;
+		st,squelch-level = <3>;
+		st,hs-rx-offset = <2>;
+		st,no-lsfs-sc;
+	};
+
+	usb_vbus: regulator-vbus {
+		compatible = "regulator-fixed";
+		regulator-name = "usb_en_vbus";
+		gpio = <&gpiob 13 GPIO_ACTIVE_HIGH>;
+		enable-active-high;
+	};
+};
+
+&pinctrl {
+	uart4_pins: uart4 {
+		pins1 {
+			pinmux = <STM32_PINMUX('H', 13, AF8)>; /* UART4_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+
+		pins2 {
+			pinmux = <STM32_PINMUX('H', 14, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+	};
+
+	uart4_idle_pins: uart4-idle {
+		pins1 {
+			pinmux = <STM32_PINMUX('H', 13, ANALOG)>; /* UART4_TX */
+		};
+
+		pins2 {
+			pinmux = <STM32_PINMUX('H', 14, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+	};
+
+	uart4_sleep_pins: uart4-sleep {
+		pins {
+			pinmux = <STM32_PINMUX('H', 13, ANALOG)>, /* UART4_TX */
+				 <STM32_PINMUX('H', 14, ANALOG)>; /* UART4_RX */
+		};
+	};
+};
+
+&uart4 {
+	pinctrl-names = "default", "sleep", "idle", "no_console_suspend";
+	pinctrl-0 = <&uart4_pins>;
+	pinctrl-1 = <&uart4_sleep_pins>;
+	pinctrl-2 = <&uart4_idle_pins>;
+	pinctrl-3 = <&uart4_pins>;
+	status = "okay";
+};
+
+&sdmmc1 {
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc1_b4_pins_a>;
+	pinctrl-1 = <&sdmmc1_b4_od_pins_a>;
+	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
+	broken-cd;
+	st,neg-edge;
+	bus-width = <4>;
+	vmmc-supply = <&v3v3>;
+	status = "okay";
+};
+
+&usbh_ehci {
+	phys = <&usbphyc_port0>;
+	phy-names = "usb";
+	vbus-supply = <&usb_vbus>;
+	status = "okay";
+};
+
+&usbphyc {
+	vdd3v3-supply = <&vdd_usb>;
+	status = "okay";
+};
+
+&usbphyc_port0 {
+	st,phy-tuning = <&usb_phy_tuning>;
+};
diff --git a/arch/arm/dts/stm32mp157c-byteengine-m5.dtsi b/arch/arm/dts/stm32mp157c-byteengine-m5.dtsi
new file mode 100644
index 0000000000..a808ad3367
--- /dev/null
+++ b/arch/arm/dts/stm32mp157c-byteengine-m5.dtsi
@@ -0,0 +1,440 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Copyright (C) 2019 bytes at work AG - http://www.bytesatwork.ch
+ */
+
+#include "stm32mp157.dtsi"
+#include "stm32mp15xc.dtsi"
+#include "stm32mp15-pinctrl.dtsi"
+#include "stm32mp15xxac-pinctrl.dtsi"
+#include "stm32mp157c-dk2-scmi.dtsi"
+#include <dt-bindings/mfd/st,stpmic1.h>
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/rtc/rtc-stm32.h>
+
+#if defined(CONFIG_BYTEENGINE_STM32MP1_RAM_512)
+#define STM32MP1_RAM_SIZE 0x20000000
+#elif defined(CONFIG_BYTEENGINE_STM32MP1_RAM_1024)
+#define STM32MP1_RAM_SIZE 0x40000000
+#else
+#error No RAM configuration for byteengine defined!
+#endif
+
+/ {
+	compatible = "batw,m5", "st,stm32mp157";
+
+	memory@c0000000 {
+		device_type = "memory";
+		reg = <0xc0000000 STM32MP1_RAM_SIZE>;
+	};
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		mcuram2: mcuram2@10000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10000000 0x40000>;
+			no-map;
+		};
+
+		vdev0vring0: vdev0vring0@10040000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10040000 0x1000>;
+			no-map;
+		};
+
+		vdev0vring1: vdev0vring1@10041000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10041000 0x1000>;
+			no-map;
+		};
+
+		vdev0buffer: vdev0buffer@10042000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10042000 0x4000>;
+			no-map;
+		};
+
+		mcu_rsc_table: mcu_rsc_table@10048000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10048000 0x8000>;
+			no-map;
+		};
+
+		mcuram: mcuram@30000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x30000000 0x40000>;
+			no-map;
+		};
+
+		retram: retram@38000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x38000000 0x10000>;
+			no-map;
+		};
+
+		gpu_reserved: gpu@da000000 {
+			reg = <0xda000000 0x4000000>;
+			no-map;
+		};
+	};
+};
+
+&pinctrl {
+	i2c2_pins: i2c2-0 {
+		pins {
+			pinmux = <STM32_PINMUX('H', 4, AF4)>, /* I2C2_SCL */
+				 <STM32_PINMUX('H', 5, AF4)>; /* IC2C_SDA */
+			bias-pull-up;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c2_pins_sleep: i2c2-1 {
+		pins {
+			pinmux = <STM32_PINMUX('H', 4, ANALOG)>, /* I2C2_SCL */
+				 <STM32_PINMUX('H', 5, ANALOG)>; /* I2C2_SDA */
+		};
+	};
+
+	sdmmc2_pins: sdmmc2-b4-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
+				 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+	};
+
+	sdmmc2_od_pins: sdmmc2-b4-od-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, AF9)>; /* SDMMC2_D3 */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+
+		pins3 {
+			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+			slew-rate = <1>;
+			drive-open-drain;
+			bias-pull-up;
+		};
+	};
+
+	sdmmc2_sleep_pins: sdmmc2-b4-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
+				 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
+				 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
+		};
+	};
+};
+
+&pinctrl_z {
+	i2c4_pins: i2c4-0 {
+		pins {
+			pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
+				 <STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c4_pins_sleep: i2c4-1 {
+		pins {
+			pinmux = <STM32_PINMUX('Z', 4, ANALOG)>, /* I2C4_SCL */
+				 <STM32_PINMUX('Z', 5, ANALOG)>; /* I2C4_SDA */
+		};
+	};
+};
+
+&bsec {
+	status = "okay";
+};
+
+/* HWID EEPROM Configuration */
+&i2c2 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c2_pins>;
+	pinctrl-1 = <&i2c2_pins_sleep>;
+	status = "okay";
+
+	hwid: eeprom@57 {
+		reg = <0x57>;
+	};
+};
+
+/* PMIC and bytesatwork configuration EEPROM */
+&i2c4 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c4_pins>;
+	pinctrl-1 = <&i2c4_pins_sleep>;
+	i2c-scl-rising-time-ns = <185>;
+	i2c-scl-falling-time-ns = <20>;
+	status = "okay";
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	eeprom: eeprom@57 {
+		reg = <0x57>;
+	};
+
+	pmic: stpmic@33 {
+		compatible = "st,stpmic1";
+		reg = <0x33>;
+		interrupts-extended = <&exti 55 IRQ_TYPE_EDGE_FALLING>;
+		interrupt-controller;
+		#interrupt-cells = <2>;
+
+		st,main-control-register = <0x04>;
+		st,vin-control-register = <0xc0>;
+		st,usb-control-register = <0x20>;
+
+		regulators {
+			compatible = "st,stpmic1-regulators";
+
+			ldo1-supply = <&v3v3>;
+			ldo3-supply = <&vdd_ddr>;
+			ldo6-supply = <&v3v3>;
+			pwr_sw1-supply = <&bst_out>;
+			pwr_sw2-supply = <&bst_out>;
+
+			vddcore: buck1 {
+				regulator-name = "vddcore";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-always-on;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			vdd_ddr: buck2 {
+				regulator-name = "vdd_ddr";
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-always-on;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			vdd: buck3 {
+				regulator-name = "vdd";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				st,mask-reset;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			v3v3: buck4 {
+				regulator-name = "v3v3";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				regulator-over-current-protection;
+				regulator-initial-mode = <0>;
+			};
+
+			v1v8_audio: ldo1 {
+				regulator-name = "v1v8_audio";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-always-on;
+				interrupts = <IT_CURLIM_LDO1 0>;
+			};
+
+			v3v3_hdmi: ldo2 {
+				regulator-name = "v3v3_hdmi";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				interrupts = <IT_CURLIM_LDO2 0>;
+			};
+
+			vtt_ddr: ldo3 {
+				regulator-name = "vtt_ddr";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <750000>;
+				regulator-always-on;
+				regulator-over-current-protection;
+			};
+
+			vdd_usb: ldo4 {
+				regulator-name = "vdd_usb";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				interrupts = <IT_CURLIM_LDO4 0>;
+			};
+
+			vdda: ldo5 {
+				regulator-name = "vdda";
+				regulator-min-microvolt = <2900000>;
+				regulator-max-microvolt = <2900000>;
+				interrupts = <IT_CURLIM_LDO5 0>;
+				regulator-boot-on;
+			};
+
+			v1v2_hdmi: ldo6 {
+				regulator-name = "v1v2_hdmi";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1200000>;
+				regulator-always-on;
+				interrupts = <IT_CURLIM_LDO6 0>;
+			};
+
+			vref_ddr: vref_ddr {
+				regulator-name = "vref_ddr";
+				regulator-always-on;
+				regulator-over-current-protection;
+			};
+
+			bst_out: boost {
+				regulator-name = "bst_out";
+				interrupts = <IT_OCP_BOOST 0>;
+			};
+
+			vbus_otg: pwr_sw1 {
+				regulator-name = "vbus_otg";
+				interrupts = <IT_OCP_OTG 0>;
+				regulator-active-discharge;
+			};
+
+			vbus_sw: pwr_sw2 {
+				regulator-name = "vbus_sw";
+				interrupts = <IT_OCP_SWOUT 0>;
+				regulator-active-discharge;
+			};
+		};
+
+		onkey: onkey {
+			compatible = "st,stpmic1-onkey";
+			interrupts = <IT_PONKEY_F 0>, <IT_PONKEY_R 1>;
+			interrupt-names = "onkey-falling", "onkey-rising";
+			status = "disabled";
+		};
+
+		pmic_watchdog: pmic-watchdog {
+			compatible = "st,stpmic1-wdt";
+			status = "disabled";
+		};
+	};
+};
+
+/* eMMC */
+&sdmmc2 {
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc2_pins>;
+	pinctrl-1 = <&sdmmc2_od_pins>;
+	pinctrl-2 = <&sdmmc2_sleep_pins>;
+	non-removable;
+	no-sd;
+	no-sdio;
+	st,neg-edge;
+	bus-width = <8>;
+	vmmc-supply = <&v3v3>;
+	vqmmc-supply = <&v3v3>;
+	mmc-ddr-3_3v;
+	status = "okay";
+};
+
+/* NOR Flash */
+&qspi {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&qspi_clk_pins_a
+		     &qspi_bk1_pins_a
+		     &qspi_cs1_pins_a>;
+	pinctrl-1 = <&qspi_clk_sleep_pins_a
+		     &qspi_bk1_sleep_pins_a
+		     &qspi_cs1_sleep_pins_a>;
+	reg = <0x58003000 0x1000>, <0x70000000 0x4000000>;
+	#address-cells = <1>;
+	#size-cells = <0>;
+	status = "okay";
+
+	flash0: w25q128jv@0 {
+		compatible = "jedec,spi-nor";
+		reg = <0>;
+		spi-rx-bus-width = <2>;
+		spi-max-frequency = <10000000>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
+
+&cpu0{
+	cpu-supply = <&vddcore>;
+};
+
+&cpu1{
+	cpu-supply = <&vddcore>;
+};
+
+&crc1 {
+	status = "okay";
+};
+
+/* Thermal Sensor */
+&dts {
+	status = "okay";
+};
+
+&gpu {
+	contiguous-area = <&gpu_reserved>;
+};
+
+&hash1 {
+	status = "okay";
+};
+
+&m4_rproc {
+	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
+			<&vdev0vring1>, <&vdev0buffer>, <&mcu_rsc_table>;
+	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>, <&ipcc 3>;
+	mbox-names = "vq0", "vq1", "shutdown", "detach";
+	interrupt-parent = <&exti>;
+	interrupts = <68 1>;
+	interrupt-names = "wdg";
+	recovery;
+	status = "disabled";
+};
+
+&pwr_irq {
+	pwr-supply = <&vdd>;
+};
+
+&vrefbuf {
+	regulator-min-microvolt = <2500000>;
+	regulator-max-microvolt = <2500000>;
+	vdda-supply = <&vdd>;
+	status = "okay";
+};
diff --git a/arch/arm/mach-stm32mp/Kconfig.15x b/arch/arm/mach-stm32mp/Kconfig.15x
index 882a580339..dd6ed11778 100644
--- a/arch/arm/mach-stm32mp/Kconfig.15x
+++ b/arch/arm/mach-stm32mp/Kconfig.15x
@@ -25,6 +25,27 @@ config TARGET_ST_STM32MP15X
 		Evalulation board (EV1) or Discovery board (DK1 and DK2).
 		The difference between board are managed with devicetree
 
+config TARGET_BYTEDEVKIT
+	bool "bytesatwork byteDEVKIT"
+	select ARCH_SUPPORT_PSCI
+	select BINMAN
+	select CPU_V7A
+	select CPU_V7_HAS_NONSEC
+	select CPU_V7_HAS_VIRT
+	select OF_BOARD_SETUP
+	select PINCTRL_STM32
+	select STM32_RCC
+	select STM32_RESET
+	select STM32_SERIAL
+	select SUPPORT_SPL
+	select SYS_ARCH_TIMER
+	imply CMD_NVEDIT_INFO
+	help
+		Target the bytesatwork bytedevkit with SOC STM32MP157. Support
+		Development Kits version 1.1 and 1.3. The difference between
+		boards are managed with baw-config and content of the EEPROM on
+		the devkit.
+
 config TARGET_DH_STM32MP1_PDK2
 	bool "DH STM32MP1 PDK2"
 	help
diff --git a/board/bytesatwork/bytedevkit/Kconfig b/board/bytesatwork/bytedevkit/Kconfig
new file mode 100644
index 0000000000..9c4f4dbda6
--- /dev/null
+++ b/board/bytesatwork/bytedevkit/Kconfig
@@ -0,0 +1,43 @@
+if TARGET_BYTEDEVKIT
+
+config SYS_BOARD
+	default "bytedevkit"
+
+config SYS_VENDOR
+	default "bytesatwork"
+
+config SYS_CONFIG_NAME
+	default "bytedevkit"
+
+choice
+	prompt "byteENGINE STM32MP1 DDR size"
+	default BYTEENGINE_STM32MP1_RAM_512
+
+config BYTEENGINE_STM32MP1_RAM_512
+	bool "512MB"
+	help
+	  Target the byteengine SoM with 512Mb of RAM. Choose this if you are
+	  using a bytedevkit with 512Mb of RAM.
+
+config BYTEENGINE_STM32MP1_RAM_1024
+	bool "1024MB"
+	help
+	  Target the byteengine SoM with 1Gb of RAM. Choose this if you are
+	  using a bytedevkit with 1Gb of RAM.
+
+endchoice
+
+config CMD_HWID
+	bool "read from and program HWID EEPROM and set env vars"
+	default y
+	help
+	  This option enables the U-Boot CLI command `hwid` which enables
+	  reading out content from the designated HWID (HardWare ID) EEPROM
+	  and programming that ROM.  With that EEPROM byteENGINEs are able to
+	  destinguish on which type of board they run and can dynamically
+	  pass the right Device-Trees to the Kernel.
+
+source "board/st/common/Kconfig"
+source "board/bytesatwork/baw_config/Kconfig"
+
+endif
diff --git a/board/bytesatwork/bytedevkit/Makefile b/board/bytesatwork/bytedevkit/Makefile
new file mode 100644
index 0000000000..2f270695c9
--- /dev/null
+++ b/board/bytesatwork/bytedevkit/Makefile
@@ -0,0 +1,10 @@
+# SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+#
+# Copyright (c) 2019 bytes at work AG. All rights reserved.
+#
+# based on stm32mp1/Makefile:
+# Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+#
+obj-y += stm32mp1.o
+obj-$(CONFIG_CMD_HWID) += hwid.o
+obj-y += ../baw_config/
diff --git a/board/bytesatwork/bytedevkit/hwid.c b/board/bytesatwork/bytedevkit/hwid.c
new file mode 100644
index 0000000000..9041ea1a0b
--- /dev/null
+++ b/board/bytesatwork/bytedevkit/hwid.c
@@ -0,0 +1,481 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (c) 2022 bytes at work AG. All rights reserved.
+ *
+ * U-Boot command to read HWID EEPROM module and parse the there-contained
+ * information offers functionality to read hardware identifiers from EEPROM and
+ * write such
+ */
+
+#include <common.h>
+#include <config.h>
+#include <command.h>
+#include <eeprom.h>
+#include <errno.h>
+#include <string.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <u-boot/crc.h>
+#include <vsprintf.h>
+#include <linux/delay.h>
+
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
+#define HWID_EEPROM_DEVICE (1)
+#define EEPROM_ROW (16)
+#define MAGIC "byteDEVKIT"
+#define MAGIC_SIZE (16)
+struct bytedevkit_header {
+	/* Header Format for byteDEVKIT 1.3 */
+	char magic[MAGIC_SIZE];	/* "byteDEVKIT", as defined in MAGIC */
+	u32 crc;		/* checksum of the payload */
+	u32 payload_size;	/* size of the header starting here (it's 57) */
+	u8 header_version;
+	u8 major;
+	u8 minor;
+	u8 patch;
+	u32 art_nr;
+	u32 lot;
+	u8 lotseq;
+	char proddate[12];
+	char flashdate[6];
+	char flashuser[6];
+	char uid[16];
+} __packed;
+#define HEADER_PAYLOAD_START (MAGIC_SIZE + sizeof(u32))
+#define HEADER_PAYLOAD_SIZE (sizeof(struct bytedevkit_header) \
+			     - HEADER_PAYLOAD_START)
+#define UNDEFINED (-1)
+#define CURRENT_HEADER_VERSION (1)
+
+static struct bytedevkit_header hwid_eeprom;
+
+#if defined(DEBUG)
+/* DEBUGGING FUNCTIONS */
+static void inspect_args(int argc,  char * const argv[])
+{
+	/* Print the command being called */
+	printf("calling: `hwid");
+	for (int i = 0; i < argc; i++)
+		printf(" %s", argv[i]);
+	printf("`\n");
+}
+#endif
+
+/* UTILITIES */
+static int check_magic_number(void)
+{
+	/* Compare the EEPROM string with our pre-processor #define MAGIC */
+	if (strncmp(hwid_eeprom.magic, MAGIC, 11)) {
+		printf("Unexpected magic \"%s\" != \"%s\"", hwid_eeprom.magic,
+		       MAGIC);
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int read_whole_header(void)
+{	/* read the whole EEPROM header and store the info in hwid_eeprom */
+	int ret = eeprom_read(CONFIG_SYS_I2C_EEPROM_ADDR, 0,
+			      (uchar *)&hwid_eeprom,
+			      sizeof(struct bytedevkit_header));
+	if (ret)
+		printf("Error accessing HWID EEPROM\n");
+	return ret;
+}
+
+static void set_env_vars(s8 header, s8 major, s8 minor, s8 patch)
+{
+	/* sets the environment variables for byteDEVKIT */
+	char env_string[4] = ""; /* maximum: "255" */
+
+	sprintf(env_string, "%d", header);
+	env_set("board_header", env_string);
+	sprintf(env_string, "%d", major);
+	env_set("board_major", env_string);
+	sprintf(env_string, "%d", minor);
+	env_set("board_minor", env_string);
+	sprintf(env_string, "%d", patch);
+	env_set("board_patch", env_string);
+}
+
+#if defined(DEBUG)
+static int prompt_agreement(void)
+{
+	/* returns zero if the input character is *not* y or Y */
+	char prompt_input = getc();
+
+	printf("%c\n", prompt_input);
+	return (prompt_input == 'y' || prompt_input == 'Y');
+}
+#endif
+
+static int get_header_and_integrity_checks(void)
+{
+	int ret;
+
+	ret = read_whole_header();
+	if (ret) {
+		printf("ERROR while reading header\n");
+		return ret;
+	}
+	ret = check_magic_number();
+	if (ret) {
+		if (ret == -EIO) {
+			/* No HWID EEPROM could be accessed: we assume to be
+			 * running on a byteDEVKIT version 1.2
+			 */
+			set_env_vars(UNDEFINED, 1, 2, UNDEFINED);
+		} else {
+			printf("failed reading magic number from HWID EEPROM\n");
+		}
+		return ret;
+	}
+	if (hwid_eeprom.payload_size != HEADER_PAYLOAD_SIZE) {
+		printf("HWID EEPROM: unexpected payload size: %d != %d\n",
+		       hwid_eeprom.payload_size, HEADER_PAYLOAD_SIZE);
+		return -EINVAL;
+	}
+	if (crc32(0, (u8 *)&hwid_eeprom + HEADER_PAYLOAD_START,
+		  hwid_eeprom.payload_size) != hwid_eeprom.crc) {
+		printf("HWID EEPROM CRC validation failed!\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int write_eeprom(unsigned int addr, uchar *source, unsigned int count)
+{
+	const int block_size = 64; /* as specified by the reference manual */
+	int offset;
+	int ret = 0;
+
+	for (int i = 0; i <= count / block_size; i++) {
+		offset = i * block_size;
+		ret = eeprom_write(addr, offset, source + offset, block_size);
+		if (ret)
+			break;
+		mdelay(5);
+	}
+	return ret;
+}
+
+/* U-BOOT CLI COMMANDS */
+int do_hwid_check(struct cmd_tbl *cmdtp, int flag, int argc,
+		  char * const argv[])
+{
+	/* Checks for presence of an EEPROM on I2C bus. If no EEPROM is found
+	 * we probably operate on a byteDEVKIT 1.1; otherwise we check the
+	 * EEPROM contents for valid data.
+	 * There's no explicit need to call this function; it gets called by
+	 * `hwid get` before setting environment variables.
+	 */
+	int ret;
+
+	ret = get_header_and_integrity_checks();
+	if (ret) {
+		printf("error checking header\n");
+	} else {
+		set_env_vars(hwid_eeprom.header_version, hwid_eeprom.major,
+			     hwid_eeprom.minor, hwid_eeprom.patch);
+	}
+	return ret;
+}
+
+int do_prod_data(struct cmd_tbl *cmdtp, int flag, int argc,
+		 char * const argv[])
+{
+	int ret;
+
+	ret = get_header_and_integrity_checks();
+	if (ret)
+		printf("WARNING: error checking header\n");
+
+	printf("\tPRODUCTION DATA\n");
+	printf("art_nr: %d\n", hwid_eeprom.art_nr);
+	printf("lot: %d\n", hwid_eeprom.lot);
+	printf("lotseq: %d\n", hwid_eeprom.lotseq);
+	printf("proddate: %s\n", hwid_eeprom.proddate);
+	printf("flashdate: %s\n", hwid_eeprom.flashdate);
+	printf("flashuser: %s\n", hwid_eeprom.flashuser);
+	printf("uid: %s\n", hwid_eeprom.uid);
+
+	return ret;
+}
+
+int do_hwid_set(struct cmd_tbl *cmdtp, int flag, int argc,
+		char * const argv[])
+{
+	/* Write the magic-number, the CRC, the size of the header, as well as
+	 * the values for header version, major version, minor version and patch
+	 * to the EEPROM.
+	 */
+	struct bytedevkit_header new_header;
+	int ret;
+
+	if (argc != 11) {
+		printf("wrong number of arguments!\n");
+		return CMD_RET_USAGE;
+	}
+
+	strlcpy(new_header.magic, MAGIC, MAGIC_SIZE);
+	new_header.payload_size = (u32)HEADER_PAYLOAD_SIZE;
+	new_header.header_version = CURRENT_HEADER_VERSION;
+	new_header.major = (u8)simple_strtoul(argv[1], NULL, 10);
+	new_header.minor = (u8)simple_strtoul(argv[2], NULL, 10);
+	new_header.patch = (u8)simple_strtoul(argv[3], NULL, 10);
+	new_header.art_nr = (u32)simple_strtoul(argv[4], NULL, 10);
+	new_header.lot = (u32)simple_strtoul(argv[5], NULL, 10);
+	new_header.lotseq = (u8)simple_strtoul(argv[6], NULL, 10);
+	strlcpy(new_header.proddate, argv[7], 12);
+	strlcpy(new_header.flashdate, argv[8], 6);
+	strlcpy(new_header.flashuser, argv[9], 6);
+	strlcpy(new_header.uid, argv[10], 16);
+	new_header.crc = crc32(0, (u8 *)&new_header + HEADER_PAYLOAD_START,
+			       new_header.payload_size);
+
+	ret = write_eeprom(CONFIG_SYS_I2C_EEPROM_ADDR, (uchar *)&new_header,
+			   (sizeof(struct bytedevkit_header)));
+	if (!ret)
+		printf("HWID EEPROM was flashed successfully\n");
+	return ret;
+}
+
+#if defined(DEBUG)
+int do_eeprom_reset(struct cmd_tbl *cmdtp, int flag, int argc,
+		    char * const argv[])
+{
+	/* reset COUNT rows (16 bytes) of EEPROM starting at OFFSET */
+
+	char reset_string[EEPROM_ROW];
+	char byte;
+	int offset;
+	int count;
+	int ret;
+
+	if (argc != 4)
+		return CMD_RET_USAGE;
+
+	offset = simple_strtoul(argv[1], NULL, 16);
+	byte = simple_strtoul(argv[2], NULL, 16);
+	count = simple_strtoul(argv[3], NULL, 10);
+
+	for (int i = 0; i < EEPROM_ROW; i++)
+		reset_string[i] = byte;
+
+	for (int i = 0; i < count; i++) {
+		ret = eeprom_write(CONFIG_SYS_I2C_EEPROM_ADDR,
+				   offset + EEPROM_ROW * i,
+				   (uchar *)&reset_string,
+				   sizeof(reset_string));
+		if (ret)
+			return ret;
+		mdelay(5);
+	}
+
+	return 0;
+}
+
+int do_hwid_read(struct cmd_tbl *cmdtp, int flag, int argc,
+		 char * const argv[])
+{
+	/* debug-interface to view COUNT bytes of EEPROM (like `i2c md`) */
+	u8 byte;
+	int count;
+	int ret;
+
+	if (argc != 2)
+		return -EINVAL;
+
+	count = simple_strtoul(argv[1], NULL, 10);
+
+	for (int i = 0; i < count; i++) {
+		if (i % EEPROM_ROW == 0)
+			printf("\n%04x   ", i);
+
+		ret = eeprom_read(CONFIG_SYS_I2C_EEPROM_ADDR, i, &byte, 1);
+
+		if (ret != 0) {
+			printf("Error reading from eeprom\n");
+			return -EINVAL;
+		}
+		printf("%02x ", byte);
+	}
+
+	printf("\nfinished reading raw content from EEPROM\n");
+
+	return 0;
+};
+
+int do_e2e_test(struct cmd_tbl *cmdtp, int flag, int argc,
+		char * const argv[])
+{
+	/* Run an End-To-End Test over the whole module
+	 *
+	 * First we erase data in the EEPROM, we check back whether this
+	 * succeeded.  We then write some header info into the EEPROM and check
+	 * back.  Finally we read the data in the EEPROM, check if for validity
+	 * and sets.  Environment Variables accordingly. We check that back as
+	 * well.
+	 */
+
+	int ret;
+	int e2e_argc;
+	char *e2e_argv[12];
+
+	printf("\n\t\tE2E TEST\n\n");
+
+	printf("Reset EEPROM? (yN) ");
+	if (!prompt_agreement()) {
+		printf("aborted\n");
+		return -UNDEFINED;
+	}
+
+	printf("\tRESETTING EEPROM\n");
+	e2e_argc = 4;
+	e2e_argv[0] = "eeprom_reset";
+	e2e_argv[1] = "0";
+	e2e_argv[2] = "ff";
+	e2e_argv[3] = "4";
+	inspect_args(e2e_argc, e2e_argv);
+	ret = do_eeprom_reset(cmdtp, flag, e2e_argc, e2e_argv);
+	if (ret) {
+		printf("FAILURE (code: %d)\n", ret);
+		return ret;
+	}
+
+	printf("\tREADING EEPROM\n");
+	e2e_argc = 2;
+	e2e_argv[0] = "read";
+	e2e_argv[1] = "32";
+	inspect_args(e2e_argc, e2e_argv);
+	ret = do_hwid_read(cmdtp, flag, e2e_argc, e2e_argv);
+	if (ret) {
+		printf("FAILURE (code: %d)\n", ret);
+		return ret;
+	}
+
+	printf("\tFLASH HEADER\n");
+	e2e_argc = 12;
+	e2e_argv[0] = "set";
+	e2e_argv[1] = "0";			/* header */
+	e2e_argv[2] = "1";			/* major */
+	e2e_argv[3] = "3";			/* minor */
+	e2e_argv[4] = "0";			/* patch */
+	e2e_argv[5] = "888053501";		/* art_nr */
+	e2e_argv[6] = "103";			/* lot */
+	e2e_argv[7] = "1";			/* lotseq */
+	e2e_argv[8] = "2022-01-01";		/* proddate */
+	e2e_argv[9] = "19/20";			/* flashdate */
+	e2e_argv[10] = "sdu";			/* flashuser */
+	e2e_argv[11] = "1804270009737";		/* uid */
+
+	inspect_args(e2e_argc, e2e_argv);
+	ret = do_hwid_set(cmdtp, flag, e2e_argc, e2e_argv);
+	if (ret) {
+		printf("FAILURE (code: %d)\n", ret);
+		return ret;
+	}
+
+	printf("\tCHECKING VALIDITY OF EEPROM CONTENT\n");
+	e2e_argc = 1;
+	e2e_argv[0] = "check";
+	inspect_args(e2e_argc, e2e_argv);
+	ret = do_hwid_check(cmdtp, flag, e2e_argc, e2e_argv);
+	if (ret) {
+		printf("FAILURE (code: %d)\n", ret);
+		return ret;
+	}
+
+	printf("\n\n");
+
+	return 0;
+};
+
+int do_info(struct cmd_tbl *cmdtp, int flag, int argc,
+	    char * const argv[])
+{
+	printf("Information about this module:\n");
+	printf("HWID EEPROM DEVICE: %d\n", HWID_EEPROM_DEVICE);
+	printf("HWID EEPROM ADDR: 0x%X\n", CONFIG_SYS_I2C_EEPROM_ADDR);
+	printf("MAGIC: \"%s\"\n", MAGIC);
+	printf("HEADER PAYLOAD START: %d\n", HEADER_PAYLOAD_START);
+	printf("HEADER PAYLOAD SIZE: %d\n", HEADER_PAYLOAD_SIZE);
+	printf("UNDEFINED: %d\n", UNDEFINED);
+	return 0;
+}
+#endif
+
+static struct cmd_tbl cmd_hwid_sub[] = {
+	U_BOOT_CMD_MKENT(check, 1, 1, do_hwid_check, "", ""),
+	U_BOOT_CMD_MKENT(prod_data, 1, 1, do_prod_data, "", ""),
+	U_BOOT_CMD_MKENT(set, 11, 1, do_hwid_set, "", ""),
+#if defined(DEBUG)
+	U_BOOT_CMD_MKENT(eeprom_reset, 1, 1, do_eeprom_reset, "", ""),
+	U_BOOT_CMD_MKENT(read, 2, 1, do_hwid_read, "", ""),
+	U_BOOT_CMD_MKENT(e2e, 1, 1, do_e2e_test, "", ""),
+	U_BOOT_CMD_MKENT(info, 1, 1, do_info, "", "")
+#endif
+};
+
+int do_hwid(struct cmd_tbl *cmdtp, int flag,  int argc,  char * const argv[])
+{
+	struct cmd_tbl *cmd;
+
+	if (argc < 2) {
+		/* abort and show help if no subcommand is entered */
+		return CMD_RET_USAGE;
+	}
+
+	argc--; /* decrease argument counter */
+	argv++; /* move argument pointer past first argument */
+
+	cmd = find_cmd_tbl(argv[0], cmd_hwid_sub, ARRAY_SIZE(cmd_hwid_sub));
+	if (cmd) {
+		eeprom_init(HWID_EEPROM_DEVICE);
+		return cmd->cmd(cmdtp, flag, argc, argv);
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+/* Here the entry-command for the U-Boot CLI is defined.  Just enter `hwid` and
+ * find yourself within a quasi-guided text-based user interface as you are
+ * probably already used to from U-Boot.
+ */
+U_BOOT_CMD(hwid, 12, 0, do_hwid,
+	   "HWID EEPROM module. commands are:\n"
+	   " - check\n"
+	   " - prod_data\n"
+	   " - set"
+#if defined(DEBUG)
+	   "\nThe following commands are intended for debug purpose:\n"
+	   " - get\n"
+	   " - eeprom_reset\n"
+	   " - read\n"
+	   " - e2e\n"
+	   " - info\n"
+#endif
+	   ,
+	   "check\n"
+	   "  checks the connection to the EEPROM module and validity\n"
+	   "prod_data\n"
+	   "  prints production data\n"
+	   "set\n"
+	   "  writes production data into HWID EEPROM, must be in form:\n"
+	   "  MAJOR MINOR PATCH ART_NR LOT LOTSEQ PRODDATE FLASHDATE\n"
+	   "  FLASHUSER UID\n"
+#if defined(DEBUG)
+	   "eeprom_reset OFFSET BYTE COUNT\n"
+	   "  resets COUNT rows (16 Bytes)\n"
+	   "  OFFSET (in hex) in HWID EEPROM to BYTE (passed in hex).\n"
+	   "read COUNT\n"
+	   "  reads COUNT (decimal) bytes from HWID EEPROM and print them.\n"
+	   "e2e\n"
+	   "  test this whole module.\n"
+	   "  Modify EEPROM and may delete precious data\n"
+	   "info\n"
+	   "  information about constants in this module\n"
+#endif
+	)
diff --git a/board/bytesatwork/bytedevkit/stm32mp1.c b/board/bytesatwork/bytedevkit/stm32mp1.c
new file mode 100644
index 0000000000..fee7a86861
--- /dev/null
+++ b/board/bytesatwork/bytedevkit/stm32mp1.c
@@ -0,0 +1,176 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ * Copyright (C) 2020 Engicam S.r.l.
+ * Copyright (C) 2020 Amarula Solutions(India)
+ * Author: Jagan Teki <jagan@amarulasolutions.com>
+ */
+
+#include <common.h>
+#include <env.h>
+#include <env_internal.h>
+#include <syscon.h>
+#include <asm/io.h>
+#include <asm/arch/sys_proto.h>
+#include <power/regulator.h>
+
+#include "../baw_config/baw_config_eeprom.h"
+
+int checkboard(void)
+{
+	char *mode;
+	const char *fdt_compat;
+	int fdt_compat_len;
+
+	if (IS_ENABLED(CONFIG_TFABOOT))
+		mode = "trusted";
+	else
+		mode = "basic";
+
+	printf("Board: stm32mp1 in %s mode", mode);
+	fdt_compat = ofnode_get_property(ofnode_root(), "compatible",
+					 &fdt_compat_len);
+	if (fdt_compat && fdt_compat_len)
+		printf(" (%s)", fdt_compat);
+	puts("\n");
+
+	return 0;
+}
+
+/* board dependent setup after realloc */
+int board_init(void)
+{
+	/* address of boot parameters */
+	gd->bd->bi_boot_params = STM32_DDR_BASE + 0x100;
+
+	if (IS_ENABLED(CONFIG_DM_REGULATOR))
+		regulators_enable_boot_on(_DEBUG);
+
+	return 0;
+}
+
+int board_late_init(void)
+{
+	char *boot_device;
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	const void *fdt_compat;
+	int fdt_compat_len;
+	int ret;
+	u32 otp;
+	struct udevice *dev;
+	char buf[10];
+
+	fdt_compat = fdt_getprop(gd->fdt_blob, 0, "compatible",
+				 &fdt_compat_len);
+	if (fdt_compat && fdt_compat_len) {
+		if (strncmp(fdt_compat, "st,", 3) != 0) {
+			env_set("board_name", fdt_compat);
+		} else {
+			char dtb_name[256];
+			int buf_len = sizeof(dtb_name);
+
+			env_set("board_name", fdt_compat + 3);
+
+			strlcpy(dtb_name, fdt_compat + 3, buf_len);
+			buf_len -= strlen(fdt_compat + 3);
+			strlcat(dtb_name, ".dtb", buf_len);
+			env_set("fdtfile", dtb_name);
+		}
+	}
+	ret = uclass_get_device_by_driver(UCLASS_MISC,
+					  DM_DRIVER_GET(stm32mp_bsec),
+					  &dev);
+
+	if (!ret)
+		ret = misc_read(dev, STM32_BSEC_SHADOW(BSEC_OTP_BOARD),
+				&otp, sizeof(otp));
+	if (!ret && otp) {
+		snprintf(buf, sizeof(buf), "0x%04x", otp >> 16);
+		env_set("board_id", buf);
+
+		snprintf(buf, sizeof(buf), "0x%04x",
+			 ((otp >> 8) & 0xF) - 1 + 0xA);
+		env_set("board_rev", buf);
+	}
+#endif
+
+	/* Check the boot-source to disable bootdelay */
+	boot_device = env_get("boot_device");
+	if (boot_device &&
+	    (!strcmp(boot_device, "serial") || !strcmp(boot_device, "usb")))
+		env_set("bootdelay", "0");
+
+	if (IS_ENABLED(CONFIG_BAW_CONFIG_EEPROM) && baw_config_eeprom_init())
+		printf("EEPROM init failed!\n");
+	return 0;
+}
+
+enum env_location env_get_location(enum env_operation op, int prio)
+{
+	u32 bootmode = get_bootmode();
+
+	if (prio)
+		return ENVL_UNKNOWN;
+
+	switch (bootmode & TAMP_BOOT_DEVICE_MASK) {
+	case BOOT_FLASH_SD:
+	case BOOT_FLASH_EMMC:
+		if (CONFIG_IS_ENABLED(ENV_IS_IN_MMC))
+			return ENVL_MMC;
+		else if (CONFIG_IS_ENABLED(ENV_IS_IN_EXT4))
+			return ENVL_EXT4;
+		else
+			return ENVL_NOWHERE;
+
+	case BOOT_FLASH_NAND:
+	case BOOT_FLASH_SPINAND:
+		if (CONFIG_IS_ENABLED(ENV_IS_IN_UBI))
+			return ENVL_UBI;
+		else
+			return ENVL_NOWHERE;
+
+	case BOOT_FLASH_NOR:
+		if (CONFIG_IS_ENABLED(ENV_IS_IN_SPI_FLASH))
+			return ENVL_SPI_FLASH;
+		else
+			return ENVL_NOWHERE;
+
+	default:
+		return ENVL_NOWHERE;
+	}
+}
+
+const char *env_ext4_get_intf(void)
+{
+	u32 bootmode = get_bootmode();
+
+	switch (bootmode & TAMP_BOOT_DEVICE_MASK) {
+	case BOOT_FLASH_SD:
+	case BOOT_FLASH_EMMC:
+		return "mmc";
+	default:
+		return "";
+	}
+}
+
+const char *env_ext4_get_dev_part(void)
+{
+	static char *const dev_part[] = {"0:auto", "1:auto", "2:auto"};
+	u32 bootmode = get_bootmode();
+
+	return dev_part[(bootmode & TAMP_BOOT_INSTANCE_MASK) - 1];
+}
+
+int mmc_get_env_dev(void)
+{
+	u32 bootmode = get_bootmode();
+
+	return (bootmode & TAMP_BOOT_INSTANCE_MASK) - 1;
+}
+
+#if defined(CONFIG_OF_BOARD_SETUP)
+int ft_board_setup(void *blob, struct bd_info *bd)
+{
+	return 0;
+}
+#endif
diff --git a/board/bytesatwork/common b/board/bytesatwork/common
new file mode 120000
index 0000000000..fea1e658d7
--- /dev/null
+++ b/board/bytesatwork/common
@@ -0,0 +1 @@
+../st/common
\ No newline at end of file
diff --git a/configs/stm32mp157_bytedevkit_1g_defconfig b/configs/stm32mp157_bytedevkit_1g_defconfig
new file mode 100644
index 0000000000..27642d7cb8
--- /dev/null
+++ b/configs/stm32mp157_bytedevkit_1g_defconfig
@@ -0,0 +1,109 @@
+CONFIG_ARM=y
+CONFIG_ARCH_STM32MP=y
+CONFIG_SUPPORT_PASSING_ATAGS=y
+CONFIG_INITRD_TAG=y
+CONFIG_TFABOOT=y
+CONFIG_SYS_MALLOC_F_LEN=0x80000
+CONFIG_ENV_SIZE=0x20000
+CONFIG_ENV_OFFSET=0xC0000
+CONFIG_DEFAULT_DEVICE_TREE="stm32mp157c-bytedevkit-v1-3"
+CONFIG_DDR_CACHEABLE_SIZE=0x8000000
+CONFIG_TARGET_BYTEDEVKIT=y
+CONFIG_ENV_OFFSET_REDUND=0xE0000
+# CONFIG_ARMV7_NONSEC is not set
+CONFIG_ARMV7_LPAE=y
+CONFIG_SYS_LOAD_ADDR=0xc2000000
+CONFIG_BYTEENGINE_STM32MP1_RAM_1024=y
+CONFIG_BAW_CONFIG_EEPROM_BUS_NAME="i2c@5c002000"
+CONFIG_BAW_CONFIG_EEPROM_WRITE_DELAY_MS=5
+CONFIG_ENV_VARS_UBOOT_CONFIG=y
+CONFIG_FIT=y
+CONFIG_SUPPORT_RAW_INITRD=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPUINFO=y
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_EEPROM=y
+CONFIG_SYS_I2C_EEPROM_BUS=1
+CONFIG_SYS_I2C_EEPROM_ADDR_LEN=2
+CONFIG_SYS_EEPROM_SIZE=32768
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_BIND=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_MTD=y
+CONFIG_CMD_PART=y
+CONFIG_CMD_REMOTEPROC=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_PXE=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_MTDIDS_DEFAULT="nor0=w25q128-flash.0"
+CONFIG_MTDPARTS_DEFAULT="mtdparts_nor1=256k(fsbl1),256k(fsbl2),256k(metadata1),256k(metadata2),4m(fip-a),-(rest)"
+CONFIG_ISO_PARTITION=y
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
+CONFIG_SYS_MMC_ENV_DEV=1
+# CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG is not set
+CONFIG_CLK_SCMI=y
+CONFIG_DM_HWSPINLOCK=y
+CONFIG_HWSPINLOCK_STM32=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_STM32F7=y
+CONFIG_DM_MAILBOX=y
+CONFIG_STM32_IPCC=y
+CONFIG_STM32_FMC2_EBI=y
+CONFIG_I2C_EEPROM=y
+CONFIG_SYS_I2C_EEPROM_ADDR=0x57
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_STM32_SDMMC2=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_WINBOND=y
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_STMFX=y
+CONFIG_DM_PMIC=y
+CONFIG_PMIC_STPMIC1=y
+CONFIG_STM32MP1_DDR_INTERACTIVE=y
+CONFIG_REMOTEPROC_OPTEE=y
+CONFIG_REMOTEPROC_STM32_COPRO=y
+CONFIG_RESET_SCMI=y
+CONFIG_SERIAL_RX_BUFFER=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_STM32_QSPI=y
+CONFIG_SYSRESET_PSCI=y
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+CONFIG_DM_VIDEO=y
+CONFIG_BACKLIGHT_GPIO=y
+CONFIG_VIDEO_STM32=y
+CONFIG_VIDEO_STM32_DSI=y
+CONFIG_VIDEO_STM32_MAX_XRES=720
+CONFIG_VIDEO_STM32_MAX_YRES=1280
+CONFIG_VIDEO_STM32_MAX_BPP=32
+# CONFIG_BINMAN_FDT is not set
+# CONFIG_LMB_USE_MAX_REGIONS is not set
+CONFIG_LMB_MEMORY_REGIONS=2
+CONFIG_LMB_RESERVED_REGIONS=16
diff --git a/configs/stm32mp157_bytedevkit_defconfig b/configs/stm32mp157_bytedevkit_defconfig
new file mode 100644
index 0000000000..7707a2cb1a
--- /dev/null
+++ b/configs/stm32mp157_bytedevkit_defconfig
@@ -0,0 +1,108 @@
+CONFIG_ARM=y
+CONFIG_ARCH_STM32MP=y
+CONFIG_SUPPORT_PASSING_ATAGS=y
+CONFIG_INITRD_TAG=y
+CONFIG_TFABOOT=y
+CONFIG_SYS_MALLOC_F_LEN=0x80000
+CONFIG_ENV_SIZE=0x20000
+CONFIG_ENV_OFFSET=0xC0000
+CONFIG_DEFAULT_DEVICE_TREE="stm32mp157c-bytedevkit-v1-3"
+CONFIG_DDR_CACHEABLE_SIZE=0x8000000
+CONFIG_TARGET_BYTEDEVKIT=y
+CONFIG_ENV_OFFSET_REDUND=0xE0000
+# CONFIG_ARMV7_NONSEC is not set
+CONFIG_ARMV7_LPAE=y
+CONFIG_SYS_LOAD_ADDR=0xc2000000
+CONFIG_BAW_CONFIG_EEPROM_BUS_NAME="i2c@5c002000"
+CONFIG_BAW_CONFIG_EEPROM_WRITE_DELAY_MS=5
+CONFIG_ENV_VARS_UBOOT_CONFIG=y
+CONFIG_FIT=y
+CONFIG_SUPPORT_RAW_INITRD=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPUINFO=y
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_EEPROM=y
+CONFIG_SYS_I2C_EEPROM_BUS=1
+CONFIG_SYS_I2C_EEPROM_ADDR_LEN=2
+CONFIG_SYS_EEPROM_SIZE=32768
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_BIND=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_MTD=y
+CONFIG_CMD_PART=y
+CONFIG_CMD_REMOTEPROC=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_PXE=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_MTDIDS_DEFAULT="nor0=w25q128-flash.0"
+CONFIG_MTDPARTS_DEFAULT="mtdparts_nor1=256k(fsbl1),256k(fsbl2),256k(metadata1),256k(metadata2),4m(fip-a),-(rest)"
+CONFIG_ISO_PARTITION=y
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
+CONFIG_SYS_MMC_ENV_DEV=1
+# CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG is not set
+CONFIG_CLK_SCMI=y
+CONFIG_DM_HWSPINLOCK=y
+CONFIG_HWSPINLOCK_STM32=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_STM32F7=y
+CONFIG_DM_MAILBOX=y
+CONFIG_STM32_IPCC=y
+CONFIG_STM32_FMC2_EBI=y
+CONFIG_I2C_EEPROM=y
+CONFIG_SYS_I2C_EEPROM_ADDR=0x57
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_STM32_SDMMC2=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_WINBOND=y
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_STMFX=y
+CONFIG_DM_PMIC=y
+CONFIG_PMIC_STPMIC1=y
+CONFIG_STM32MP1_DDR_INTERACTIVE=y
+CONFIG_REMOTEPROC_OPTEE=y
+CONFIG_REMOTEPROC_STM32_COPRO=y
+CONFIG_RESET_SCMI=y
+CONFIG_SERIAL_RX_BUFFER=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_STM32_QSPI=y
+CONFIG_SYSRESET_PSCI=y
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+CONFIG_DM_VIDEO=y
+CONFIG_BACKLIGHT_GPIO=y
+CONFIG_VIDEO_STM32=y
+CONFIG_VIDEO_STM32_DSI=y
+CONFIG_VIDEO_STM32_MAX_XRES=720
+CONFIG_VIDEO_STM32_MAX_YRES=1280
+CONFIG_VIDEO_STM32_MAX_BPP=32
+# CONFIG_BINMAN_FDT is not set
+# CONFIG_LMB_USE_MAX_REGIONS is not set
+CONFIG_LMB_MEMORY_REGIONS=2
+CONFIG_LMB_RESERVED_REGIONS=16
diff --git a/include/configs/bytedevkit.h b/include/configs/bytedevkit.h
new file mode 100644
index 0000000000..f9085a7c44
--- /dev/null
+++ b/include/configs/bytedevkit.h
@@ -0,0 +1,122 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright (c) 2019 bytes at work AG. All rights reserved.
+ *
+ * based on stm32mp1.h:
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ *
+ * Configuration settings for the STM32MP15x CPU
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+#include <linux/sizes.h>
+#include <asm/arch/stm32.h>
+
+/*
+ * Number of clock ticks in 1 sec
+ */
+#define CONFIG_SYS_HZ				1000
+
+#ifdef CONFIG_ARMV7_PSCI
+/* PSCI support */
+#define CONFIG_ARMV7_SECURE_BASE		STM32_SYSRAM_BASE
+#define CONFIG_ARMV7_SECURE_MAX_SIZE		STM32_SYSRAM_SIZE
+#endif
+
+/*
+ * Configuration of the external SRAM memory used by U-Boot
+ */
+#define CONFIG_SYS_SDRAM_BASE			STM32_DDR_BASE
+
+/*
+ * For booting Linux, use the first 256 MB of memory, since this is
+ * the maximum mapped by the Linux kernel during initialization.
+ */
+#define CONFIG_SYS_BOOTMAPSZ		SZ_256M
+
+/* SPL support */
+#ifdef CONFIG_SPL
+/* BOOTROM load address */
+#define CONFIG_SPL_TEXT_BASE		0x2FFC2500
+/* SPL use DDR */
+#define CONFIG_SPL_BSS_START_ADDR	0xC0200000
+#define CONFIG_SPL_BSS_MAX_SIZE		0x00100000
+#define CONFIG_SYS_SPL_MALLOC_START	0xC0300000
+#define CONFIG_SYS_SPL_MALLOC_SIZE	0x00100000
+
+/* limit SYSRAM usage to first 128 KB */
+#define CONFIG_SPL_MAX_SIZE		0x00020000
+#define CONFIG_SPL_STACK		(STM32_SYSRAM_BASE + \
+					 STM32_SYSRAM_SIZE)
+#endif /* #ifdef CONFIG_SPL */
+
+/* MMC SD */
+#define CONFIG_SYS_MMC_MAX_DEVICE	3
+
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+
+#define CONFIG_BOOTCOMMAND \
+	"run select_dtb; " \
+	"mmc rescan; " \
+	"run mmc_boot; " \
+
+#define MMC_BOOT_CMD \
+	"mmc_boot=load mmc ${mmc_dev} ${fdt_addr_r} ${dtbfile} || exit; " \
+	"load mmc ${mmc_dev} ${kernel_addr_r} ${kernelfile} || exit; " \
+	"run mmc_args; " \
+	"bootm ${kernel_addr_r} - ${fdt_addr_r};\0"
+
+/*
+ * memory layout for 32M uncompressed/compressed kernel,
+ * 1M fdt, 1M script, 1M pxe and 1M for splashimage
+ * and the ramdisk at the end.
+ */
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"mmc_dev=0:7\0" \
+	"mmc_root=/dev/mmcblk0p7\0" \
+	"kernelfile=/boot/uImage\0" \
+	"stdin=serial\0" \
+	"stdout=serial\0" \
+	"stderr=serial\0" \
+	"bootdelay=1\0" \
+	"spl_file=u-boot-spl.stm32\0" \
+	"uboot_file=u-boot.img\0" \
+	"uboot_offset=0x80000\0" \
+	"loadaddr=" __stringify(CONFIG_LOADADDR) "\0" \
+	"spl_uboot_size=0x280000\0" \
+	"kernel_addr_r=0xc2000000\0" \
+	"fdt_addr_r=0xc4000000\0" \
+	"scriptaddr=0xc4100000\0" \
+	"pxefile_addr_r=0xc4200000\0" \
+	"splashimage=0xc4300000\0"  \
+	"ramdisk_addr_r=0xc4400000\0" \
+	"bootlimit=0\0" \
+	"console=ttySTM0,115200\0" \
+	"default_args=rootwait rw vt.global_cursor_default=0 consoleblank=0\0" \
+	"mmc_args=setenv bootargs ${default_args} console=${console} " \
+		"root=${mmc_root} ${bootargs_append}; \0" \
+	"select_dtb=if hwid check; " \
+		"then " \
+			"setenv dtbfile \"" \
+			"/boot/stm32mp157c-bytedevkit-" \
+			"v${board_major}-${board_minor}.dtb\"; " \
+		"else " \
+			"setenv dtbfile " \
+			"\"/boot/stm32mp157c-bytedevkit-v1-1.dtb\";" \
+		"fi;\0" \
+	"update_spiflash=echo Updating SPI Flash ...; " \
+		"sf probe 0; " \
+		"sf erase 0 +${spl_uboot_size}; " \
+		"mmc rescan; " \
+		"ext4load mmc 0:4 ${loadaddr} ${spl_file} || exit; "\
+		"sf write ${loadaddr} 0 ${filesize}; " \
+		"ext4load mmc 0:4 ${loadaddr} ${uboot_file} || exit; " \
+		"sf write ${loadaddr} ${uboot_offset} ${filesize};\0" \
+	MMC_BOOT_CMD
+
+#define BAW_CONFIG_BUILTIN_PCB    M5_PCB_REV_1_2
+#define BAW_CONFIG_BUILTIN_RAM    M5_RAM_K4B4G1646DBIK0
+#define BAW_CONFIG_BUILTIN_FLASH  EMMC_8GB
+
+#endif /* __CONFIG_H */
-- 
2.39.2

