From 140f24213b733fe89cb80a7890657880ef864b18 Mon Sep 17 00:00:00 2001
From: Guy Morand <guy.morand@bytesatwork.ch>
Date: Thu, 2 May 2024 11:00:58 +0200
Subject: [PATCH] include: configs: bytedevkit: Add initial version

Based on stm32mp15_basic_defconfig.

byteengine: Add qSPI interface support for booting

The "Boot select" switch on byteDEVKIT needs to be set to "NOR" for this
to work.

bytedevkit: setup single rootfs partition

bytedevkit: Use `hwid check` to select dtb

`hwid check` sets the board_* variables. These are in turn used to set the
`dtbfile` variable.

include: configs: bytedevkit: Enable environment

It is stored redundantly on eMMC.

configs: bytedevkit: Adapt to 2021.10

- Use new load address
- Remove support for eMMC boot, it is done by tf-a

Signed-off-by: Lothar Rubusch <lothar.rubusch@bytesatwork.ch>
Signed-off-by: Gabriel Wicki <gabriel.wicki@bytesatwork.ch>
Signed-off-by: Daniel Ammann <daniel.ammann@bytesatwork.ch>
Signed-off-by: Guy Morand <guy.morand@bytesatwork.ch>
---
 include/configs/bytedevkit.h | 138 +++++++++++++++++++++++++++++++++++
 1 file changed, 138 insertions(+)
 create mode 100644 include/configs/bytedevkit.h

diff --git a/include/configs/bytedevkit.h b/include/configs/bytedevkit.h
new file mode 100644
index 0000000000..42bb55df8d
--- /dev/null
+++ b/include/configs/bytedevkit.h
@@ -0,0 +1,138 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright (c) 2019 bytes at work AG. All rights reserved.
+ *
+ * based on stm32mp1.h:
+ * Copyright (C) 2018, STMicroelectronics - All Rights Reserved
+ *
+ * Configuration settings for the STM32MP15x CPU
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+#include <linux/sizes.h>
+#include <asm/arch/stm32.h>
+
+/*
+ * Number of clock ticks in 1 sec
+ */
+#define CONFIG_SYS_HZ				1000
+
+#ifdef CONFIG_ARMV7_PSCI
+/* PSCI support */
+#define CONFIG_ARMV7_SECURE_BASE		STM32_SYSRAM_BASE
+#define CONFIG_ARMV7_SECURE_MAX_SIZE		STM32_SYSRAM_SIZE
+#endif
+
+/*
+ * Configuration of the external SRAM memory used by U-Boot
+ */
+#define CONFIG_SYS_SDRAM_BASE			STM32_DDR_BASE
+#define CONFIG_SYS_INIT_SP_ADDR			CONFIG_SYS_TEXT_BASE
+
+/*
+ * Console I/O buffer size
+ */
+#define CONFIG_SYS_CBSIZE			SZ_1K
+
+/*
+ * default load address used for command tftp,  bootm , loadb, ...
+ */
+#define CONFIG_LOADADDR			0xc2000000
+#define CONFIG_SYS_LOAD_ADDR		CONFIG_LOADADDR
+
+/*
+ * For booting Linux, use the first 256 MB of memory, since this is
+ * the maximum mapped by the Linux kernel during initialization.
+ */
+#define CONFIG_SYS_BOOTMAPSZ		SZ_256M
+
+/* ATAGs */
+#define CONFIG_CMDLINE_TAG
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_INITRD_TAG
+
+/* Extend size of kernel image for uncompression */
+#define CONFIG_SYS_BOOTM_LEN			SZ_32M
+
+/* SPL support */
+#ifdef CONFIG_SPL
+/* BOOTROM load address */
+#define CONFIG_SPL_TEXT_BASE		0x2FFC2500
+/* SPL use DDR */
+#define CONFIG_SPL_BSS_START_ADDR	0xC0200000
+#define CONFIG_SPL_BSS_MAX_SIZE		0x00100000
+#define CONFIG_SYS_SPL_MALLOC_START	0xC0300000
+#define CONFIG_SYS_SPL_MALLOC_SIZE	0x00100000
+
+/* limit SYSRAM usage to first 128 KB */
+#define CONFIG_SPL_MAX_SIZE		0x00020000
+#define CONFIG_SPL_STACK		(STM32_SYSRAM_BASE + \
+					 STM32_SYSRAM_SIZE)
+#endif /* #ifdef CONFIG_SPL */
+
+/* MMC SD */
+#define CONFIG_SYS_MMC_MAX_DEVICE	3
+
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+
+#define CONFIG_BOOTCOMMAND \
+	"run select_dtb; " \
+	"mmc rescan; " \
+	"run mmc_boot; " \
+
+#define MMC_BOOT_CMD \
+	"mmc_boot=load mmc ${mmc_dev} ${fdt_addr_r} ${dtbfile} || exit; " \
+	"load mmc ${mmc_dev} ${kernel_addr_r} ${kernelfile} || exit; " \
+	"run mmc_args; " \
+	"bootm ${kernel_addr_r} - ${fdt_addr_r};\0"
+
+/*
+ * memory layout for 32M uncompressed/compressed kernel,
+ * 1M fdt, 1M script, 1M pxe and 1M for splashimage
+ * and the ramdisk at the end.
+ */
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"mmc_dev=0:7\0" \
+	"mmc_root=/dev/mmcblk0p7\0" \
+	"kernelfile=/boot/uImage\0" \
+	"stdin=serial\0" \
+	"stdout=serial\0" \
+	"stderr=serial\0" \
+	"bootdelay=1\0" \
+	"spl_file=u-boot-spl.stm32\0" \
+	"uboot_file=u-boot.img\0" \
+	"uboot_offset=0x80000\0" \
+	"loadaddr=" __stringify(CONFIG_LOADADDR) "\0" \
+	"spl_uboot_size=0x280000\0" \
+	"kernel_addr_r=0xc2000000\0" \
+	"fdt_addr_r=0xc4000000\0" \
+	"scriptaddr=0xc4100000\0" \
+	"pxefile_addr_r=0xc4200000\0" \
+	"splashimage=0xc4300000\0"  \
+	"ramdisk_addr_r=0xc4400000\0" \
+	"bootlimit=0\0" \
+	"console=ttySTM0,115200\0" \
+	"default_args=rootwait rw vt.global_cursor_default=0 consoleblank=0\0" \
+	"mmc_args=setenv bootargs ${default_args} console=${console} " \
+		"root=${mmc_root} ${bootargs_append}; \0" \
+	"select_dtb=if hwid check; " \
+		"then " \
+			"setenv dtbfile \"" \
+			"/boot/stm32mp157c-bytedevkit-" \
+			"v${board_major}-${board_minor}.dtb\"; " \
+		"else " \
+			"setenv dtbfile " \
+			"\"/boot/stm32mp157c-bytedevkit-v1-1.dtb\";" \
+		"fi;\0" \
+	"update_spiflash=echo Updating SPI Flash ...; " \
+		"sf probe 0; " \
+		"sf erase 0 +${spl_uboot_size}; " \
+		"mmc rescan; " \
+		"ext4load mmc 0:4 ${loadaddr} ${spl_file} || exit; "\
+		"sf write ${loadaddr} 0 ${filesize}; " \
+		"ext4load mmc 0:4 ${loadaddr} ${uboot_file} || exit; " \
+		"sf write ${loadaddr} ${uboot_offset} ${filesize};\0" \
+	MMC_BOOT_CMD
+
+#endif /* __CONFIG_H */
-- 
2.39.2

